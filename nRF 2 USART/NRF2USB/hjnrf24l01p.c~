// Config SPI bus with these options
      // SPI Type: Master
      // SPI Clock Rate: 2000.000 kHz
      // SPI Clock Phase: Cycle Start
      // SPI Clock Polarity: Low
      // SPI Data Order: MSB First

#ifndef __hjnrf24l01p_c_included__
#define __hjnrf24l01p_c_included__
#include <R2T_Debug.h>
#include <nrf24l01.h>
#define NRF_CE       PORTC.1
#define NRF_CE_DDR   DDRC.1
#define NRF_CSN      PORTC.0
#define NRF_CSN_DDR  DDRC.0

char payload_len;  

void nrf24_config(char mode_tx1_rx0,char channel,char pay_length)
{
    PcDbg("NRF Config start...");
    payload_len = pay_length;
    
    NRF_CE = 0;       // Set CE Pin Low
    NRF_CE_DDR = 1;   //Set CE Pin as output

    NRF_CSN = 1;      // Set Chip Select High so it is not selected , if we want to write sth then we should set it LOW
    NRF_CSN_DDR = 1;  // Set CSN Pin as output   
 
    nrf24_configRegister(RF_CH,channel); // It can support up to 127 Channels 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR)); // Set RF_DR_High to 00 means 1Mbs <> RF_PWR Register set to 11 that means 0dbm at TX ouput
    nrf24_configRegister(CONFIG,((1<<EN_CRC)|(0<<CRCO))); // CRC Enabled , 1 Byte CRC       
    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0A<<ARC));
    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    nrf24_powerUpRx();
}
void nrf24_rx_address(char *adr) 
{
    NRF_CE = 0;
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    NRF_CE = 1;
}
char nrf24_payload_length()
{
    return payload_len;
}
/* Set the TX address */
void nrf24_tx_address(char *adr)
{
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
}
void nrf24_configRegister(char reg, char value)
{
    NRF_CSN = 0;
    spi(W_REGISTER | (REGISTER_MASK & reg)); //Call Regsiter Address -  Use Mask and Write Regsiter command for writing into register
    spi(value);
    NRF_CSN = 1;
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(char *value) 
{    
    /* Go to Standby-I first */
    NRF_CE = 0;
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        NRF_CSN = 0;
        /* Write cmd to flush transmit FIFO */
        spi(FLUSH_TX);     
        /* Pull up chip select */
        NRF_CSN = 1;                    
    #endif 

    /* Pull down chip select */
     NRF_CSN = 0;
    /* Write cmd to write payload */
    spi(W_TX_PAYLOAD);
    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
    /* Pull up chip select */
    NRF_CSN = 1;
    /* Start the transmission */
    NRF_CE = 1;    
}
char nrf24_isSending()
{
    char status;

    /* read the current status */
    status = nrf24_getStatus();
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    {        
        return 0; /* false */
    }

    return 1; /* true */

}
char nrf24_getStatus()
{
    char rv;
    NRF_CSN = 0;
    rv = spi(NOP);
    NRF_CSN = 1;
    return rv;
}
char nrf24_lastMessageStatus()
{
    char rv;

    rv = nrf24_getStatus();

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    {
        return NRF24_TRANSMISSON_OK;
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    {
        return NRF24_MESSAGE_LOST;
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
    }
}
void nrf24_powerUpRx()
{     
    NRF_CSN = 0;
    spi(FLUSH_RX); // Clear NRF FiFo 
    NRF_CSN = 1;
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));  // Disable the RX Fifo interuppt , TX Sent Intreuppt Flag , and maximum tried of sending intreuppt flag
    NRF_CE = 0;    
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX))); // Powerup the device and set it to PRX mode    
    NRF_CE = 1;
}
void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}
/* Returns the number of retransmissions occured for the last message */
char nrf24_retransmissionCount()
{
    char rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
void nrf24_powerDown()
{
    NRF_CE = 0;
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(char *dataout,char *datain,char len)
{
    char i;

    for(i=0;i<len;i++)
    {
        datain[i] = spi(dataout[i]);
    }

}
/* send multiple bytes over SPI */
void nrf24_transmitSync(char *dataout,char len)
{
   char i;
    
    for(i=0;i<len;i++)
    {
        spi(dataout[i]);
    }

}
/* Read multiple bytes from spi */
void nrf24_readRegister(char reg, char *value, char len)
{
    NRF_CSN = 0;
    spi(R_REGISTER | (REGISTER_MASK & reg));
    nrf24_transferSync(value,value,len);
    NRF_CSN = 1;
}
/* Write to a single register of nrf24 */
void nrf24_writeRegister(char reg, char *value, char len) 
{
    NRF_CSN = 0;
    spi(W_REGISTER | (REGISTER_MASK & reg)); // Send Register addr
    nrf24_transmitSync(value,len);           // Send Data
    NRF_CSN = 1;
}
#endif
