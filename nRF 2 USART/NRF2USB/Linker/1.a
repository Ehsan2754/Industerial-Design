;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/8/2013
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <spi.h>
;
;/* NRF24L01+ Module */
;#define NRF_CE       PORTC.1
;#define NRF_CE_DDR   DDRC.1
;#define NRF_CSN      PORTC.0
;#define NRF_CSN_DDR  DDRC.0
;#include <R2T\hjnrf24l01p.h>
;#include <R2T\hjnrf24l01p.c>
;
;#ifndef __hjnrf24l01p_c_included__
;#define __hjnrf24l01p_c_included__
;#include <R2T_Debug.h>

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	str -> Y+2
;	i -> R17
;	len -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	str -> Y+3
;	fixedlen -> Y+2
;	i -> R17
;	len -> R16
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	i -> R17
;	len -> R16
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;#include <R2T\nrf24l01.h>
;#include <spi.h>
;       // Config SPI bus with these options
;      // SPI Type: Master
;      // SPI Clock Rate: 2000.000 kHz
;      // SPI Clock Phase: Cycle Start
;      // SPI Clock Polarity: Low
;      // SPI Data Order: MSB First
;
;char CurrentPayLoad;
;void nrf24_config(char channel)
; 0000 0025 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;    PcDbg("NRF Config start...");
;PCODE: $0000007D VOL: 0
;	channel -> Y+0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;    NRF_CE = 0;       // Set CE Pin Low
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;    NRF_CE_DDR = 1;    //Set CE Pin as output
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;    NRF_CSN = 1;      // Set Chip Select High so it is not selected , if we want to write sth then we should set it LOW
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;    NRF_CSN_DDR = 1;  // Set CSN Pin as output
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;    PcDbg("Pins get configed ...");
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;
;//------ MyNRF Configuration --------
;//TODO : nrf24_configRegister(CONFIG,((1<<EN_CRC)|(1<<CRCO)|(1<<RX_DR)|(1<<TX_DS))); // CRC Enabled , 2 Byte CRC,RX and TX Intrrupt OFF <>
;      nrf24_configRegister(CONFIG,((1<<EN_CRC)|(1<<CRCO)));
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;      nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5)); // Enable Enhanced ShockBrust Auto Acknowledgement by ENAA_Px = 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;      nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;      nrf24_configRegister(SETUP_AW,0x03); // Default 5byte Address write , its removable if it was 0x03
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;      nrf24_configRegister(SETUP_RETR,(0x05<<ARD)|(0x0E<<ARC));  // Delay between each AutoReTransmit is 1500us , 14 Retransmit
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;      nrf24_configRegister(RF_CH,channel);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;      nrf24_configRegister(RF_SETUP,(0<<RF_DR)|(3<<RF_PWR)); // Set RF_DR_High to 00 means 1Mbs <> RF_PWR Register set to 11 that means 0dbm at TX ouput
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;      nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;      nrf24_configRegister(RX_PW_P1, 32); // Pipe length set to 20 however it not usable in DynamicPayload mode
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;      nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;      nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;      nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;      nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;      nrf24_configRegister(DYNPD,(1<<DPL_P0)|(1<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5)); // Enable Dynamic Payload Length for Pipe 1 and Pipe 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;      nrf24_configRegister(Feature,0x04); //Enable Dynamic Payload Length
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;//    nrf24_configRegister(RF_CH,channel); // It can support up to 127 Channels
;//    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
;//    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
;//    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
;//    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
;//    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
;//    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
;//    nrf24_configRegister(RF_SETUP, 0x07); // Set RF_DR_High to 00 means 1Mbs <> RF_PWR Register set to 11 that means 0dbm at TX ouput
;//       nrf24_configRegister(CONFIG,((1<<EN_CRC)|(0<<CRCO))); // CRC Enabled , 1 Byte CRC
;//   // Auto Acknowledgment
;//    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
;//    // Enable RX addresses
;//    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
;//    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
;//    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0E<<ARC));
;//    // Dynamic length configurations: No dynamic length
;//    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
;    nrf24_powerUpRx();
;PCODE: $000000C8 VOL: 0
;}
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;void nrf24_rx_address(char *adr)
;{
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;    NRF_CE = 0;
;PCODE: $000000CE VOL: 0
;	*adr -> Y+0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;    NRF_CE = 1;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;}
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;char nrf24_dynamicpayload_length()
;{
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;  char result;
;  NRF_CSN = 0;
;PCODE: $000000DE VOL: 0
;	result -> R17
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;  spi(R_RX_PL_WID);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;  result = spi(0xff);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;  NRF_CSN = 1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;  return result;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;}
;PCODE: $000000EB VOL: 0
;/* Set the TX address */
;void nrf24_tx_address(char *adr)
;{
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
;    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
;PCODE: $000000EE VOL: 0
;	*adr -> Y+0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;}
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;void nrf24_configRegister(char reg, char value)
;{
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;    NRF_CSN = 0;
;PCODE: $00000100 VOL: 0
;	reg -> Y+1
;	value -> Y+0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;    spi(W_REGISTER | (REGISTER_MASK & reg)); //Call Regsiter Address -  Use Mask and Write Regsiter command for writing into register
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;    spi(value);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;    NRF_CSN = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;}
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;char nrf24_dataReady()
;{
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;    // See note in getData() function - just checking RX_DR isn't good enough
;    char status = nrf24_getStatus();
;
;    // We can short circuit on RX_DR, but if it's not set, we still need
;    // to check the FIFO for any pending packets
;    if ( status & (1 << RX_DR) )
;PCODE: $00000111 VOL: 0
;	status -> R17
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;    {
;        return 1;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;    }
;
;    return !nrf24_rxFifoEmpty();;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;}
;PCODE: $0000011F VOL: 0
;/* Checks if receive FIFO is empty or not */
;char nrf24_rxFifoEmpty()
;{
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;    char fifoStatus;
;
;    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
;PCODE: $00000122 VOL: 0
;	fifoStatus -> R17
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;    return (fifoStatus & (1 << RX_EMPTY));
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;}
;PCODE: $0000012F VOL: 0
;/* Reads payload bytes into data array */
;void nrf24_getData(char *data)
;{
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;    /* Pull down chip select */
;    NRF_CSN = 0;
;PCODE: $00000132 VOL: 0
;	*data -> Y+0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;
;    /* Send cmd to read rx payload */
;    spi(R_RX_PAYLOAD);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;
;    /* Read payload */
;    nrf24_transferSync(data,data,CurrentPayLoad);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;
;    /* Pull up chip select */
;    NRF_CSN = 1;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;
;    /* Reset status register */
;    nrf24_configRegister(STATUS,(1<<RX_DR));
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;}
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;// Sends a data package to the default address. Be sure to send the correct
;// amount of bytes as configured as payload on the receiver.
;void nrf24_send(char *value)
;{
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;    /* Go to Standby-I first */
;    NRF_CE = 0;
;PCODE: $00000148 VOL: 0
;	*value -> Y+0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;
;    /* Set to transmitter mode , Power up if needed */
;    nrf24_powerUpTx();
;PCODE: $0000014B VOL: 0
;
;    /* Do we really need to flush TX fifo each time ? */
;    #if 1
;        /* Pull down chip select */
;        NRF_CSN = 0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;        /* Write cmd to flush transmit FIFO */
;        spi(FLUSH_TX);
;PCODE: $000                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                BRSH _0x2040020
0014e7 940e 16db 	CALL SUBOPT_0xE
0014e9 dfc7      	RCALL _xatan
0014ea c044      	RJMP _0x20C0003
                 _0x2040020:
0014eb 940e 16db 	CALL SUBOPT_0xE
                +
0014ed e7ea     +LDI R30 , LOW ( 0x401A827A )
0014ee e8f2     +LDI R31 , HIGH ( 0x401A827A )
0014ef e16a     +LDI R22 , BYTE3 ( 0x401A827A )
0014f0 e470     +LDI R23 , BYTE4 ( 0x401A827A )
                 	__GETD1N 0x401A827A
0014f1 940e 1b21 	CALL __CMPF12
0014f3 f009      	BREQ PC+2
0014f4 f410      	BRCC PC+3
0014f5 940c 1503 	JMP  _0x2040021
0014f7 940e 18be 	CALL SUBOPT_0x54
0014f9 940e 16aa 	CALL SUBOPT_0x7
0014fb dfb5      	RCALL _xatan
                +
0014fc edab     +LDI R26 , LOW ( 0x3FC90FDB )
0014fd e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
0014fe ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
0014ff e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
001500 940e 16af 	CALL SUBOPT_0x8
001502 c02c      	RJMP _0x20C0003
                 _0x2040021:
001503 940e 18be 	CALL SUBOPT_0x54
001505 940e 1a37 	CALL __SUBF12
001507 937f      	PUSH R23
001508 936f      	PUSH R22
001509 93ff      	PUSH R31
00150a 93ef      	PUSH R30
00150b 940e 18be 	CALL SUBOPT_0x54
00150d 940e 1a3e 	CALL __ADDF12
00150f 91af      	POP  R26
001510 91bf      	POP  R27
001511 918f      	POP  R24
001512 919f      	POP  R25
001513 940e 16aa 	CALL SUBOPT_0x7
001515 df9b      	RCALL _xatan
                +
001516 edab     +LDI R26 , LOW ( 0x3F490FDB )
001517 e0bf     +LDI R27 , HIGH ( 0x3F490FDB )
001518 e489     +LDI R24 , BYTE3 ( 0x3F490FDB )
001519 e39f     +LDI R25 , BYTE4 ( 0x3F490FDB )
                 	__GETD2N 0x3F490FDB
00151a 940e 1a3e 	CALL __ADDF12
00151c c012      	RJMP _0x20C0003
                 _atan:
00151d 940e 1c49 	CALL __PUTPARD2
00151f 81ab      	LDD  R26,Y+3
001520 23aa      	TST  R26
001521 f022      	BRMI _0x204002C
001522 940e 16db 	CALL SUBOPT_0xE
001524 dfb7      	RCALL _yatan
001525 c009      	RJMP _0x20C0003
                 _0x204002C:
001526 940e 17f0 	CALL SUBOPT_0x35
001528 940e 1998 	CALL __ANEGF1
00152a 01df      	MOVW R26,R30
00152b 01cb      	MOVW R24,R22
00152c dfaf      	RCALL _yatan
00152d 940e 1998 	CALL __ANEGF1
                 _0x20C0003:
00152f 9624      	ADIW R28,4
001530 9508      	RET
                 
                 	.CSEG
                 _abs:
001531 93ba      	ST   -Y,R27
001532 93aa      	ST   -Y,R26
001533 91e9          ld   r30,y+
001534 91f9          ld   r31,y+
001535 9730          sbiw r30,0
001536 f41a          brpl __abs0
001537 95e0          com  r30
001538 95f0          com  r31
001539 9631          adiw r30,1
                 __abs0:
00153a 9508          ret
                 _fabs:
00153b 940e 1c49 	CALL __PUTPARD2
00153d 91e9          ld   r30,y+
00153e 91f9          ld   r31,y+
00153f 9169          ld   r22,y+
001540 9179          ld   r23,y+
001541 777f          cbr  r23,0x80
001542 9508          ret
                 _ftoa:
001543 940e 17f3 	CALL SUBOPT_0x36
001545 e0e0      	LDI  R30,LOW(0)
001546 83ea      	STD  Y+2,R30
001547 e3ef      	LDI  R30,LOW(63)
001548 83eb      	STD  Y+3,R30
001549 931a      	ST   -Y,R17
00154a 930a      	ST   -Y,R16
00154b 85eb      	LDD  R30,Y+11
00154c 85fc      	LDD  R31,Y+11+1
00154d 3fef      	CPI  R30,LOW(0xFFFF)
00154e efaf      	LDI  R26,HIGH(0xFFFF)
00154f 07fa      	CPC  R31,R26
001550 f439      	BRNE _0x206000D
001551 940e 1904 	CALL SUBOPT_0x61
                +
001553 ecae     +LDI R26 , LOW ( 2 * _0x2060000 + ( 0 ) )
001554 e0b5     +LDI R27 , HIGH ( 2 * _0x2060000 + ( 0 ) )
                 	__POINTW2FN _0x2060000,0
001555 940e 1617 	CALL _strcpyf
001557 c0a7      	RJMP _0x20C0002
                 _0x206000D:
001558 3fef      	CPI  R30,LOW(0x7FFF)
001559 e7af      	LDI  R26,HIGH(0x7FFF)
00155a 07fa      	CPC  R31,R26
00155b f439      	BRNE _0x206000C
00155c 940e 1904 	CALL SUBOPT_0x61
                +
00155e ecaf     +LDI R26 , LOW ( 2 * _0x2060000 + ( 1 ) )
00155f e0b5     +LDI R27 , HIGH ( 2 * _0x2060000 + ( 1 ) )
                 	__POINTW2FN _0x2060000,1
001560 940e 1617 	CALL _strcpyf
001562 c09c      	RJMP _0x20C0002
                 _0x206000C:
001563 85ac      	LDD  R26,Y+12
001564 23aa      	TST  R26
001565 f462      	BRPL _0x206000F
                +
001566 85e9     +LDD R30 , Y + 9
001567 85fa     +LDD R31 , Y + 9 + 1
001568 856b     +LDD R22 , Y + 9 + 2
001569 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00156a 940e 1998 	CALL __ANEGF1
00156c 940e 1909 	CALL SUBOPT_0x62
00156e 940e 190e 	CALL SUBOPT_0x63
001570 e2ed      	LDI  R30,LOW(45)
001571 93ec      	ST   X,R30
                 _0x206000F:
001572 85a8      	LDD  R26,Y+8
001573 30a7      	CPI  R26,LOW(0x7)
001574 f010      	BRLO _0x2060010
001575 e0e6      	LDI  R30,LOW(6)
001576 87e8      	STD  Y+8,R30
                 _0x2060010:
001577 8518      	LDD  R17,Y+8
                 _0x2060011:
001578 2fe1      	MOV  R30,R17
001579 5011      	SUBI R17,1
00157a 30e0      	CPI  R30,0
00157b f039      	BREQ _0x2060013
00157c 940e 18f1 	CALL SUBOPT_0x5E
00157e 940e 182f 	CALL SUBOPT_0x3E
001580 940e 18ec 	CALL SUBOPT_0x5D
001582 cff5      	RJMP _0x2060011
                 _0x2060013:
001583 940e 1915 	CALL SUBOPT_0x64
001585 940e 1a3e 	CALL __ADDF12
001587 940e 1909 	CALL SUBOPT_0x62
001589 e010      	LDI  R17,LOW(0)
00158a 940e 18e7 	CALL SUBOPT_0x5C
00158c 940e 18ec 	CALL SUBOPT_0x5D
                 _0x2060014:
00158e 940e 1915 	CALL SUBOPT_0x64
001590 940e 1b21 	CALL __CMPF12
001592 f088      	BRLO _0x2060016
001593 940e 18f1 	CALL SUBOPT_0x5E
001595 940e 181e 	CALL SUBOPT_0x3B
001597 940e 18ec 	CALL SUBOPT_0x5D
001599 5f1f      	SUBI R17,-LOW(1)
00159a 3217      	CPI  R17,39
00159b f038      	BRLO _0x2060017
00159c 940e 1904 	CALL SUBOPT_0x61
                +
00159e eda3     +LDI R26 , LOW ( 2 * _0x2060000 + ( 5 ) )
00159f e0b5     +LDI R27 , HIGH ( 2 * _0x2060000 + ( 5 ) )
                 	__POINTW2FN _0x2060000,5
0015a0 940e 1617 	CALL _strcpyf
0015a2 c05c      	RJMP _0x20C0002
                 _0x2060017:
0015a3 cfea      	RJMP _0x2060014
                 _0x2060016:
0015a4 3010      	CPI  R17,0
0015a5 f429      	BRNE _0x2060018
0015a6 940e 190e 	CALL SUBOPT_0x63
0015a8 e3e0      	LDI  R30,LOW(48)
0015a9 93ec      	ST   X,R30
0015aa c029      	RJMP _0x2060019
                 _0x2060018:
                 _0x206001A:
0015ab 2fe1      	MOV  R30,R17
0015ac 5011      	SUBI R17,1
0015ad 30e0      	CPI  R30,0
0015ae f129      	BREQ _0x206001C
0015af 940e 18f1 	CALL SUBOPT_0x5E
0015b1 940e 182f 	CALL SUBOPT_0x3E
0015b3 940e 182a 	CALL SUBOPT_0x3D
0015b5 940e 16a5 	CALL SUBOPT_0x6
0015b7 940e 1337 	CALL _floor
0015b9 940e 18ec 	CALL SUBOPT_0x5D
0015bb 940e 1915 	CALL SUBOPT_0x64
0015bd 940e 1adc 	CALL __DIVF21
0015bf 940e 19cb 	CALL __CFD1U
0015c1 2f0e      	MOV  R16,R30
0015c2 940e 190e 	CALL SUBOPT_0x63
0015c4 940e 1842 	CALL SUBOPT_0x41
0015c6 e0f0      	LDI  R31,0
0015c7 940e 18f1 	CALL SUBOPT_0x5E
0015c9 940e 1697 	CALL SUBOPT_0x4
0015cb 940e 1a8e 	CALL __MULF12
0015cd 940e 191b 	CALL SUBOPT_0x65
0015cf 940e 16af 	CALL SUBOPT_0x8
0015d1 940e 1909 	CALL SUBOPT_0x62
0015d3 cfd7      	RJMP _0x206001A
                 _0x206001C:
                 _0x2060019:
0015d4 85e8      	LDD  R30,Y+8
0015d5 30e0      	CPI  R30,0
0015d6 f121      	BREQ _0x20C0001
0015d7 940e 190e 	CALL SUBOPT_0x63
0015d9 e2ee      	LDI  R30,LOW(46)
0015da 93ec      	ST   X,R30
                 _0x206001E:
0015db 85e8      	LDD  R30,Y+8
0015dc 50e1      	SUBI R30,LOW(1)
0015dd 87e8      	STD  Y+8,R30
0015de 5fef      	SUBI R30,-LOW(1)
0015df f0d9      	BREQ _0x2060020
0015e0 940e 191b 	CALL SUBOPT_0x65
0015e2 940e 181e 	CALL SUBOPT_0x3B
0015e4 940e 1909 	CALL SUBOPT_0x62
                +
0015e6 85e9     +LDD R30 , Y + 9
0015e7 85fa     +LDD R31 , Y + 9 + 1
0015e8 856b     +LDD R22 , Y + 9 + 2
0015e9 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0015ea 940e 19cb 	CALL __CFD1U
0015ec 2f0e      	MOV  R16,R30
0015ed 940e 190e 	CALL SUBOPT_0x63
0015ef 940e 1842 	CALL SUBOPT_0x41
0015f1 e0f0      	LDI  R31,0
0015f2 940e 191b 	CALL SUBOPT_0x65
0015f4 940e 1697 	CALL SUBOPT_0x4
0015f6 940e 16af 	CALL SUBOPT_0x8
0015f8 940e 1909 	CALL SUBOPT_0x62
0015fa cfe0      	RJMP _0x206001E
                 _0x2060020:
                 _0x20C0001:
0015fb 81ae      	LDD  R26,Y+6
0015fc 81bf      	LDD  R27,Y+6+1
0015fd e0e0      	LDI  R30,LOW(0)
0015fe 93ec      	ST   X,R30
                 _0x20C0002:
0015ff 8119      	LDD  R17,Y+1
001600 8108      	LDD  R16,Y+0
001601 962d      	ADIW R28,13
001602 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmpf:
001603 93ba      	ST   -Y,R27
001604 93aa      	ST   -Y,R26
001605 91e9          ld   r30,y+
001606 91f9          ld   r31,y+
001607 91a9          ld   r26,y+
001608 91b9          ld   r27,y+
                 strcmpf0:
001609 901d          ld   r1,x+
00160a 9005      	lpm  r0,z+
00160b 1401          cp   r0,r1
00160c f421          brne strcmpf1
00160d 2000          tst  r0
00160e f7d1          brne strcmpf0
                 strcmpf3:
00160f 27ee          clr  r30
001610 9508          ret
                 strcmpf1:
001611 1810          sub  r1,r0
001612 f3e1          breq strcmpf3
001613 e0e1          ldi  r30,1
001614 f408          brcc strcmpf2
001615 50e2          subi r30,2
                 strcmpf2:
001616 9508          ret
                 _strcpyf:
001617 93ba      	ST   -Y,R27
001618 93aa      	ST   -Y,R26
001619 91e9          ld   r30,y+
00161a 91f9          ld   r31,y+
00161b 91a9          ld   r26,y+
00161c 91b9          ld   r27,y+
00161d 01cd          movw r24,r26
                 strcpyf0:
00161e 9005      	lpm  r0,z+
00161f 920d          st   x+,r0
001620 2000          tst  r0
001621 f7e1          brne strcpyf0
001622 01fc          movw r30,r24
001623 9508          ret
                 _strlen:
001624 93ba      	ST   -Y,R27
001625 93aa      	ST   -Y,R26
001626 91a9          ld   r26,y+
001627 91b9          ld   r27,y+
001628 27ee          clr  r30
001629 27ff          clr  r31
                 strlen0:
00162a 916d          ld   r22,x+
00162b 2366          tst  r22
00162c f011          breq strlen1
00162d 9631          adiw r30,1
00162e cffb          rjmp strlen0
                 strlen1:
00162f 9508          ret
                 _strlenf:
001630 93ba      	ST   -Y,R27
001631 93aa      	ST   -Y,R26
001632 27aa          clr  r26
001633 27bb          clr  r27
001634 91e9          ld   r30,y+
001635 91f9          ld   r31,y+
                 strlenf0:
001636 9005      	lpm  r0,z+
001637 2000          tst  r0
001638 f011          breq strlenf1
001639 9611          adiw r26,1
00163a cffb          rjmp strlenf0
                 strlenf1:
00163b 01fd          movw r30,r26
00163c 9508          ret
                 _strncmpf:
00163d 93aa      	ST   -Y,R26
00163e 2400          clr  r0
00163f 2411          clr  r1
001640 9169          ld   r22,y+
001641 91e9          ld   r30,y+
001642 91f9          ld   r31,y+
001643 91a9          ld   r26,y+
001644 91b9          ld   r27,y+
                 strncmpf0:
001645 2366          tst  r22
001646 f049          breq strncmpf1
001647 956a          dec  r22
001648 901d          ld   r1,x+
001649 9005      	lpm  r0,z+
00164a 1401          cp   r0,r1
00164b f421          brne strncmpf1
00164c 2000          tst  r0
00164d f7b9          brne strncmpf0
                 strncmpf3:
00164e 27ee          clr  r30
00164f 9508          ret
                 strncmpf1:
001650 1810          sub  r1,r0
001651 f3e1          breq strncmpf3
001652 e0e1          ldi  r30,1
001653 f408          brcc strncmpf2
001654 50e2          subi r30,2
                 strncmpf2:
001655 9508          ret
                 
                 	.CSEG
                 _isdigit:
001656 93aa      	ST   -Y,R26
001657 e0e1          ldi  r30,1
001658 91f9          ld   r31,y+
001659 33f0          cpi  r31,'0'
00165a f010          brlo isdigit0
00165b 33fa          cpi  r31,'9'+1
00165c f008          brlo isdigit1
                 isdigit0:
00165d 27ee          clr  r30
                 isdigit1:
00165e 9508          ret
                 _isspace:
00165f 93aa      	ST   -Y,R26
001660 e0e1          ldi  r30,1
001661 91f9          ld   r31,y+
001662 32f0          cpi  r31,' '
001663 f029          breq isspace1
001664 30f9          cpi  r31,9
001665 f010          brlo isspace0
001666 30fe          cpi  r31,13+1
001667 f008          brlo isspace1
                 isspace0:
001668 27ee          clr  r30
                 isspace1:
001669 9508          ret
                 _isxdigit:
00166a 93aa      	ST   -Y,R26
00166b e0e1          ldi  r30,1
00166c 91f9          ld   r31,y+
00166d 53f0          subi r31,0x30
00166e f040          brcs isxdigit0
00166f 30fa          cpi  r31,10
001670 f038          brcs isxdigit1
001671 75ff          andi r31,0x5f
001672 50f7          subi r31,7
001673 30fa          cpi  r31,10
001674 f010          brcs isxdigit0
001675 31f0          cpi  r31,16
001676 f008          brcs isxdigit1
                 isxdigit0:
001677 27ee          clr  r30
                 isxdigit1:
001678 9508          ret
                 
                 	.DSEG
                 _twi_tx_index:
000500           	.BYTE 0x1
                 _twi_rx_index:
000501           	.BYTE 0x1
                 _twi_result:
000502           	.BYTE 0x1
                 _ACCEL_XOUT:
000503           	.BYTE 0x2
                 _ACCEL_YOUT:
000505           	.BYTE 0x2
                 _ACCEL_ZOUT:
000507           	.BYTE 0x2
                 _GYRO_XOUT:
000509           	.BYTE 0x2
                 _GYRO_YOUT:
00050b           	.BYTE 0x2
                 _GYRO_ZOUT:
00050d           	.BYTE 0x2
                 _GYRO_XOUT_OFFSET:
00050f           	.BYTE 0x4
                 _GYRO_YOUT_OFFSET:
000513           	.BYTE 0x4
                 _GYRO_ZOUT_OFFSET:
000517           	.BYTE 0x4
                 _GYRO_YRATE:
00051b           	.BYTE 0x4
                 _GYRO_XANGLE:
00051f           	.BYTE 0x4
                 _GYRO_YANGLE:
000523           	.BYTE 0x4
                 _ACCEL_XANGLE:
000527           	.BYTE 0x4
                 _ACCEL_YANGLE:
00052b           	.BYTE 0x4
                 _COMPLEMENTARY_XANGLE:
00052f           	.BYTE 0x4
                 _COMPLEMENTARY_YANGLE:
000533           	.BYTE 0x4
                 _ANGLE_XOUT_OFFSET:
000537           	.BYTE 0x4
                 _ANGLE_YOUT_OFFSET:
00053b           	.BYTE 0x4
                 _CurrentRightSpeed:
00053f           	.BYTE 0x4
                 _CurrentLeftSpeed:
000543           	.BYTE 0x4
                 _RightDSSpeed:
000547           	.BYTE 0x2
                 _LeftDSSpeed:
000549           	.BYTE 0x2
                 _SP_Kp:
00054b           	.BYTE 0x4
                 _SP_Ki:
00054f           	.BYTE 0x4
                 _SP_Kd:
000553           	.BYTE 0x4
                 _SP_Cn:
000557           	.BYTE 0x2
                 _SP_P:
000559           	.BYTE 0x2
                 _SP_I:
00055b           	.BYTE 0x4
                 _SP_D:
00055f           	.BYTE 0x4
                 _SP_error:
000563           	.BYTE 0x2
                 _Last_SP_error:
000565           	.BYTE 0x2
                 _i:
000567           	.BYTE 0x2
                 _pid_P:
000569           	.BYTE 0x4
                 _pid_I:
00056d           	.BYTE 0x4
                 _pid_D:
000571           	.BYTE 0x4
                 _pid_previous_error:
000575           	.BYTE 0x4
                 _Kp:
000579           	.BYTE 0x4
                 _Ki:
00057d           	.BYTE 0x4
                 _Kd:
000581           	.BYTE 0x4
                 _Cn:
000585           	.BYTE 0x4
                 _rx_buffer1:
000589           	.BYTE 0x14
                 _rx_wr_index1:
00059d           	.BYTE 0x1
                 _rx_rd_index1:
00059e           	.BYTE 0x1
    OL: 0
	sei
;PCODE: $000002CC VOL: 0
; 0000 0101 }
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;void main(void)
; 0000 0103 {
;PCODE: $000002CF VOL: 0
; 0000 0104       init();
;PCODE: $000002D0 VOL: 0
; 0000 0105       PcDbg("R2T Debugger Wireless Link init...");
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0106       nrf24_config(DebugChannel);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0107       nrf24_tx_address(tx_address);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0108       nrf24_rx_address(rx_address);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0109       PcDbg("WifiLink Address:0xD7,0xD7,0xD7,0xD7,0xD7");
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 010A       printf("WifiLink Channel:%d#");
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 010B       PcDbg("<>-----WifiLink is activated and ready-----<>");
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 010C 
; 0000 010D while (1)
;PCODE: $000002E7 VOL: 0
; 0000 010E       {
; 0000 010F       // Place your code here
; 0000 0110         char str[32] = "";
; 0000 0111         if(nrf24_dataReady())
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;	str -> Y+0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0112         {
; 0000 0113          PORTD.3 = 1;
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0114          CurrentPayLoad = nrf24_dynamicpayload_length();
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0115          if(CurrentPayLoad > 32)PcDbg("RXPayload length Error");
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0116          nrf24_getData(str);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0117          SendDataNFixed(str,CurrentPayLoad);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0118          PORTD.3 = 0;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0119         }
; 0000 011A         nrf24_powerUpRx();
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 011B         delay_ms(1);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 011C         PORTD.4 = 1;
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 011D 
; 0000 011E //        /* Automatically goes to TX mode */
; 0000 011F //        nrf24_send(str);
; 0000 0120 //
; 0000 0121 //        /* Wait for transmission to end */
; 0000 0122 //        while(nrf24_isSending());
; 0000 0123 //
; 0000 0124 //        //ToDO : NRF_CE = 0;
; 0000 0125 //        /* Make analysis on last tranmission attempt */
; 0000 0126 //        temp = nrf24_lastMessageStatus();
; 0000 0127 //
; 0000 0128 //        if(temp == NRF24_TRANSMISSON_OK)
; 0000 0129 //        {
; 0000 012A //            PcDbg("Transmision done.");
; 0000 012B //        }
; 0000 012C //        else if(temp == NRF24_MESSAGE_LOST)
; 0000 012D //        {
; 0000 012E //            PcDbg("Message is lost.");
; 0000 012F //        }
; 0000 0130 //
; 0000 0131 //		/* Retranmission count indicates the tranmission quality */
; 0000 0132 //		temp = nrf24_retransmissionCount();
; 0000 0133 //		if (temp > 0) printf("> Retranmission count: %d#",temp);
; 0000 0134 //
; 0000 0135 //		/* Optionally, go back to RX mode ... */
; 0000 0136 //		//nrf24_powerUpRx();
; 0000 0137 //
; 0000 0138 //		/* Or you might want to power down after TX */
; 0000 0139 //		// nrf24_powerDown();
; 0000 013A //
; 0000 013B //		/* Wait a little ... */
; 0000 013C //		delay_ms(100);
; 0000 013D       }
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 013E }
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
