;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;//--------------------------------
;#define ADC_VREF_TYPE    0x00
;#define LED              PORTC.5
;#define Buzzer           PORTC.1
;#define FirstSeg         PORTB.3
;#define SecondSeg        PORTB.0
;#define ThirdSeg         PORTB.1
;#define ForthSeg         PORTB.2
;#define SWRST            PINC.4
;#define SWSEL            PINC.3
;#define EncoderSyncValue 9
;#define SW_RST           4
;#define SW_RST_VAL       400
;#define SW_SEL           3
;#define SW_SEL_VAL       150
;#define DelayForBlinking 500
;#define SegOFF           10
;#define RelayOut         PORTC.0
;//--------------------------------
;      //0b10000110;
;      //--BFAEDPCG
;
;char Segments[12]        = {0b00000101,0b01111101,0b01000110,0b01010100,0b00111100,0b10010100,0b10000100,0b01011101,0b00000100,0b00010100,0b11111111,0b11111110};

	.DSEG
;char AnimSeg1[6]         = {0b11011111,0b10111111,0b11101111,0b11110111,0b11111101,0b01111111};
;char AnimSeg[13]         = {0b11011111,0b10011111,0b10001111,0b10000111,0b10000101,0b00000101,0b00100101,0b01100101,0b01110101,0b01111101,0b01111111,0b11111111,0b10000110};
;
;char FirstVal            = 0;
;char SecondVal           = 0;
;char ThirdVal            = 0;
;char ForthVal            = 0;
;char TimeFlag            = 1;
;char DecimalPoint        = 0;
;char CounterINTFlag      = 0;
;bit  AnimSegFlag         = 0;
;char AnimSegFrame        = 0;
;int MainCounter          = 0;
;char CheckCounterValue   = 0;
;bit  AnimationIsOn       = 0;
;eeprom long int TotalCounter  = 0;
;eeprom int CounterValue  = 0;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030 switch(TimeFlag)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0031 {
; 0000 0032  case 1:
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0033       FirstSeg  = 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0034       SecondSeg = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0035       ThirdSeg  = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0036       ForthSeg  = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0037       PORTD = Segments[FirstVal];
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0038 
; 0000 0039       TimeFlag = 2;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003A  break;
;PCODE: $00000022 VOL: 0
; 0000 003B  case 2:
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003C       PORTD = Segments[SecondVal];
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003D       FirstSeg  = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E       SecondSeg = 1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003F       ThirdSeg  = 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040       ForthSeg  = 0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0041       if(DecimalPoint == 1) PORTD.2 = 0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0042       TimeFlag = 3;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0043  break;
;PCODE: $0000003B VOL: 0
; 0000 0044  case 3:
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0045       PORTD = Segments[ThirdVal];
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0046       FirstSeg  = 0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0047       SecondSeg = 0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0048       ThirdSeg  = 1;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0049       ForthSeg  = 0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004A       TimeFlag = 4;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004B  break;
;PCODE: $0000004E VOL: 0
; 0000 004C  case 4:
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004D  if(AnimSegFlag == 0)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004E  {
; 0000 004F       PORTD = Segments[ForthVal];
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0050  }
; 0000 0051  else
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0052  {
; 0000 0053       PORTD = AnimSeg[AnimSegFrame];
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0054  }
;PCODE: $00000061 VOL: 0
; 0000 0055       FirstSeg  = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0056       SecondSeg = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057       ThirdSeg  = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0058       ForthSeg  = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0059       TimeFlag  = 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005A 
; 0000 005B 
; 0000 005C  break;
;PCODE: $0000006C VOL: 0
; 0000 005D }
;PCODE: $0000006D VOL: 0
; 0000 005E 
; 0000 005F }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0061 {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0062 // Place your code here
; 0000 0063 
; 0000 0064 
; 0000 0065 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;unsigned int read_adc(unsigned char adc_input)
; 0000 0067 {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0068 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000078 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0069 // Delay needed for the stabilization of the ADC input voltage
; 0000 006A delay_us(10);
;PCODE: $0000007C VOL: 0
; 0000 006B // Start the AD conversion
; 0000 006C ADCSRA|=0x40;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006D // Wait for the AD conversion to complete
; 0000 006E while ((ADCSRA & 0x10)==0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006F ADCSRA|=0x10;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070 return ADCW;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0071 }
;PCODE: $0000008A VOL: 0
;void         init()
; 0000 0073 {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0074 
; 0000 0075 // Input/Output Ports initialization
; 0000 0076 // Port B initialization
; 0000 0077 // Func7=In Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0078 // State7=T State6=T State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0079 PORTB=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007A DDRB=0x3F;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007B 
; 0000 007C // Port C initialization
; 0000 007D // Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 007E // State6=T State5=0 State4=T State3=T State2=T State1=0 State0=0
; 0000 007F PORTC=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080 DDRC=0x23;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0081 
; 0000 0082 // Port D initialization
; 0000 0083 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0084 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0085 PORTD=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0086 DDRD=0xFF;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0087 
; 0000 0088 // Timer/Counter 0 initialization
; 0000 0089 // Clock source: System Clock
; 0000 008A // Clock value: 125.000 kHz
; 0000 008B TCCR0=0x03;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008C TCNT0=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008D 
; 0000 008E // Timer/Counter 1 initialization
; 0000 008F // Clock source: System Clock
; 0000 0090 // Clock value: 7.813 kHz
; 0000 0091 // Mode: Normal top=0xFFFF
; 0000 0092 // OC1A output: Discon.
; 0000 0093 // OC1B output: Discon.
; 0000 0094 // Noise Canceler: Off
; 0000 0095 // Input Capture on Falling Edge
; 0000 0096 // Timer1 Overflow Interrupt: On
; 0000 0097 // Input Capture Interrupt: Off
; 0000 0098 // Compare A Match Interrupt: Off
; 0000 0099 // Compare B Match Interrupt: Off
; 0000 009A TCCR1A=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009B TCCR1B=0x05;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 009C TCNT1H=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 009D TCNT1L=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 009E ICR1H=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 009F ICR1L=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A0 OCR1AH=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00A1 OCR1AL=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A2 OCR1BH=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A3 OCR1BL=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 2 initialization
; 0000 00A6 // Clock source: System Clock
; 0000 00A7 // Clock value: Timer2 Stopped
; 0000 00A8 // Mode: Normal top=0xFF
; 0000 00A9 // OC2 output: Disconnected
; 0000 00AA ASSR=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AB TCCR2=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AC TCNT2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00AD OCR2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00AE 
; 0000 00AF // External Interrupt(s) initialization
; 0000 00B0 // INT0: Off
; 0000 00B1 // INT1: Off
; 0000 00B2 MCUCR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B3 
; 0000 00B4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B5 TIMSK=0x05;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B6 
; 0000 00B7 // USART initialization
; 0000 00B8 // USART disabled
; 0000 00B9 UCSRB=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00BA 
; 0000 00BB // Analog Comparator initialization
; 0000 00BC // Analog Comparator: Off
; 0000 00BD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BE ACSR=0x80;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00BF SFIOR=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C0 
; 0000 00C1 // ADC initialization
; 0000 00C2 // ADC Clock frequency: 1000.000 kHz
; 0000 00C3 // ADC Voltage Reference: AREF pin
; 0000 00C4 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00C5 ADCSRA=0x83;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00C6 
; 0000 00C7 // SPI initialization
; 0000 00C8 // SPI disabled
; 0000 00C9 SPCR=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00CA 
; 0000 00CB // TWI initialization
; 0000 00CC // TWI disabled
; 0000 00CD TWCR=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00CE 
; 0000 00CF 
; 0000 00D0 // Global enable interrupts
; 0000 00D1 
; 0000 00D2 #asm("sei")
;PCODE: $000000CB VOL: 0
	sei
;PCODE: $000000CC VOL: 0
; 0000 00D3 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;int          Convert(char n)
; 0000 00D5 {
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D6 switch (n)
;PCODE: $000000D1 VOL: 0
;	n -> Y+0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00D7 {
; 0000 00D8 case '0':
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D9 return 0;break;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00DA 
; 0000 00DB case '1':
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00DC return 1;break;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00DD 
; 0000 00DE case '2':
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00DF return 2;break;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00E0 
; 0000 00E1 case '3':
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00E2 return 3;break;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E3 
; 0000 00E4 case '4':
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00E5 return 4;break;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00E6 
; 0000 00E7 case '5':
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E8 return 5;break;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00E9 
; 0000 00EA case '6':
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00EB return 6;break;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00EC 
; 0000 00ED case '7':
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00EE return 7;break;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00EF 
; 0000 00F0 
; 0000 00F1 case '8':
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F2 return 8;break;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00F3 
; 0000 00F4 case '9':
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00F5 return 9;break;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F6 
; 0000 00F7 case ' ':
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00F8 return 10;break;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00F9 
; 0000 00FA case '-':
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00FB return 11;break;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00FC }
;PCODE: $00000127 VOL: 0
; 0000 00FD }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;void         Display(signed int value)
; 0000 00FF {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0100 char DispSeg[4];
; 0000 0101 sprintf(DispSeg,"%4d",value);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;	value -> Y+4
;	DispSeg -> Y+0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0102 //if(DispSeg[3] == '1')ThirdVal = 1;
; 0000 0103 //else ThirdVal = 0;
; 0000 0104 FirstVal  = Convert(DispSeg[3]);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0105 SecondVal = Convert(DispSeg[2]);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0106 ThirdVal  = Convert(DispSeg[1]);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0107 ForthVal  = Convert(DispSeg[0]);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0108 
; 0000 0109 }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;char         IncValue(char BaseValue,char WhichSeg)
; 0000 010B {
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 010C  char VirVal = BaseValue;
; 0000 010D  while(read_adc(SW_RST) > SW_RST_VAL)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;	BaseValue -> Y+2
;	WhichSeg -> Y+1
;	VirVal -> R17
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 010E  {
; 0000 010F   switch(WhichSeg)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0110   {
; 0000 0111    case 1:
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0112    if(VirVal == 9) {VirVal = 0;} else {VirVal++;}
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0113    FirstVal = VirVal;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0114    break;
;PCODE: $00000165 VOL: 0
; 0000 0115    case 2:
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0116    if(VirVal == 9) {VirVal = 0;} else {VirVal++;}
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0117    SecondVal = VirVal;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0118    break;
;PCODE: $00000175 VOL: 0
; 0000 0119    case 3:
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 011A    if(VirVal == 1) {VirVal = 0;} else {VirVal++;}
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 011B    ThirdVal = VirVal;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 011C    break;
;PCODE: $00000185 VOL: 0
; 0000 011D    case 4:
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 011E    ForthVal = VirVal;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 011F    break;
;PCODE: $0000018B VOL: 0
; 0000 0120   }
;PCODE: $0000018C VOL: 0
; 0000 0121   delay_ms(300);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0122  }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0123  return VirVal;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0124 }
;PCODE: $00000196 VOL: 0
;void         SetValue()
; 0000 0126 {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0127  //Display
; 0000 0128  int i=0;
; 0000 0129  char VirVal = 0;
; 0000 012A  DecimalPoint = 1 ;
;PCODE: $00000199 VOL: 0
;	i -> R16,R17
;	VirVal -> R19
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 012B  ForthVal = 10;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 012C  ThirdVal = 10;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 012D  SecondVal = 10;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 012E  FirstVal = 0;
;PCODE: $000001A6 VOL: 0
; 0000 012F  Display(CounterValue);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0130  while(1)
;PCODE: $000001AB VOL: 0
; 0000 0131  {
; 0000 0132       //FirstVal
; 0000 0133       while(1)
;PCODE: $000001AC VOL: 0
; 0000 0134       {
; 0000 0135        if(FirstVal < 10) {VirVal = FirstVal;}else{VirVal = 0;}
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0136        i=0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0137        while(i < DelayForBlinking)
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0138        {
; 0000 0139         FirstVal = SegOFF;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 013A         delay_ms(1); i++;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 013B         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,1);}
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 013C         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto SetSecondVal;}
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 013D        }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 013E 
; 0000 013F        i=0;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0140        while(i < DelayForBlinking)
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0141        {
; 0000 0142         FirstVal = VirVal;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0143         delay_ms(1);i++;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0144         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,1);}
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0145         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto SetSecondVal;}
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0146        }
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0147       }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0148       //SecondVal
; 0000 0149       SetSecondVal :
;PCODE: $000001F5 VOL: 0
; 0000 014A       FirstVal = VirVal;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 014B       i = 0;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 014C       while(read_adc(SW_SEL) > SW_SEL_VAL)
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 014D       {
; 0000 014E        delay_ms(1);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 014F        i++;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0150        if(i > 500)
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0151        {
; 0000 0152         goto End;
;PCODE: $00000207 VOL: 0
; 0000 0153        }
; 0000 0154       }
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0155 
; 0000 0156       Buzzer=1;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0157       delay_ms(80);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0158       Buzzer=0;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0159       while(1)
;PCODE: $00000212 VOL: 0
; 0000 015A       {
; 0000 015B        if(SecondVal < 10) {VirVal = SecondVal;}else{VirVal = 0;}
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 015C        i=0;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 015D        while(i < DelayForBlinking)
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 015E        {
; 0000 015F         SecondVal = SegOFF;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0160         delay_ms(1); i++;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0161         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,2);}
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0162         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto SetThirdVal;}
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0163        }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0164 
; 0000 0165        i=0;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0166        while(i < DelayForBlinking)
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0167        {
; 0000 0168         SecondVal = VirVal;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0169         delay_ms(1);i++;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 016A         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,2);}
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 016B         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto SetThirdVal;}
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 016C        }
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 016D       }
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 016E       //ThirdVal
; 0000 016F       SetThirdVal :
;PCODE: $0000025B VOL: 0
; 0000 0170       SecondVal = VirVal;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0171       i = 0;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0172       while(read_adc(SW_SEL) > SW_SEL_VAL)
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0173       {
; 0000 0174        delay_ms(1);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0175        i++;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0176        if(i > 300)
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0177        {
; 0000 0178         goto End;
;PCODE: $0000026D VOL: 0
; 0000 0179        }
; 0000 017A       }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 017B       Buzzer=1;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 017C       delay_ms(80);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 017D       Buzzer=0;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 017E       while(1)
;PCODE: $00000278 VOL: 0
; 0000 017F       {
; 0000 0180        if(ThirdVal < 10) {VirVal = ThirdVal;}else{VirVal = 0;}
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0181        i=0;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0182        while(i < DelayForBlinking)
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0183        {
; 0000 0184         ThirdVal = SegOFF;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0185         delay_ms(1); i++;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0186         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,3);}
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0187         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto Again;}
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0188        }
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0189 
; 0000 018A        i=0;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 018B        while(i < DelayForBlinking)
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 018C        {
; 0000 018D         ThirdVal = VirVal;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 018E         delay_ms(1);i++;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 018F         if(read_adc(SW_RST) > SW_RST_VAL) {VirVal = IncValue(VirVal,3);}
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0190         if(read_adc(SW_SEL) > SW_SEL_VAL) {goto Again;}
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0191        }
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0192       }
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0193       Again:
;PCODE: $000002C1 VOL: 0
; 0000 0194       ThirdVal = VirVal;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0195       i = 0;
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0196       while(read_adc(SW_SEL) > SW_SEL_VAL)
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0197       {
; 0000 0198        delay_ms(1);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0199        i++;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 019A        if(i > 300)
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 019B        {
; 0000 019C         goto End;
;PCODE: $000002D3 VOL: 0
; 0000 019D        }
; 0000 019E       }
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 019F       Buzzer=1;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01A0       delay_ms(80);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01A1       Buzzer=0;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01A2  }
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01A3  End:
;PCODE: $000002E0 VOL: 0
; 0000 01A4  CounterValue  =  FirstVal;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01A5  if(SecondVal < 10) CounterValue += (SecondVal*10);
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01A6  if(ThirdVal  < 10) CounterValue += (ThirdVal*100);
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 01A7  Buzzer = 1;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01A8  Display(CounterValue);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01A9  delay_ms(150);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 01AA  Buzzer = 0;
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 01AB  delay_ms(150);
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01AC  Buzzer = 1;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01AD  delay_ms(150);
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 01AE  Buzzer = 0;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 01AF  delay_ms(150);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01B0  Buzzer = 1;
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01B1  delay_ms(1000);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01B2  Buzzer = 0;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01B3  CheckCounterValue = 1;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 01B4  AnimationIsOn = 1;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01B5 
; 0000 01B6 }
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;void         StartCounting()
; 0000 01B8 {
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 01B9  char EncoderCounter = 0;
; 0000 01BA  unsigned int BuzzDelay = 0;
; 0000 01BB  unsigned int DelayCounter = 0;
; 0000 01BC  unsigned int AnimDelayCounter = 0;
; 0000 01BD  AnimationIsOn = 0;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;	EncoderCounter -> R17
;	BuzzDelay -> R18,R19
;	DelayCounter -> R20,R21
;	AnimDelayCounter -> Y+6
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01BE  MainCounter  = 0;
;PCODE: $00000337 VOL: 0
; 0000 01BF  DecimalPoint = 1;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01C0  while(1)
;PCODE: $0000033A VOL: 0
; 0000 01C1  {
; 0000 01C2      if(CounterINTFlag == 0)
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 01C3      {
; 0000 01C4       if(read_adc(2) > 400)
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01C5       {
; 0000 01C6         if(EncoderCounter == EncoderSyncValue)
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01C7         {
; 0000 01C8       MainCounter++;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 01C9       TotalCounter++;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01CA       EncoderCounter = 0;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01CB      }
; 0000 01CC        else
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 01CD        {
; 0000 01CE       EncoderCounter++;
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01CF      }
;PCODE: $00000352 VOL: 0
; 0000 01D0        Display(MainCounter);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01D1        DecimalPoint = 1 ;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01D2        CounterINTFlag = 1;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01D3        //LED = 1;
; 0000 01D4        //delay_ms(10);
; 0000 01D5        //LED = 0;
; 0000 01D6       }
; 0000 01D7      }
;PCODE: $00000359 VOL: 0
; 0000 01D8      if((MainCounter >= CounterValue) && (CheckCounterValue == 1))
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01D9      {
; 0000 01DA      Buzzer = 1;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 01DB      RelayOut = 1;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 01DC      DelayCounter++;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01DD       if(DelayCounter > 30500)
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01DE       {
; 0000 01DF        DelayCounter = 0;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 01E0        CheckCounterValue = 0;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01E1        AnimSegFrame = 11;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01E2        Buzzer = 0;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 01E3       }
; 0000 01E4      }
;PCODE: $00000377 VOL: 0
; 0000 01E5      else if ((MainCounter > CounterValue - 6) && (CheckCounterValue == 1))
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01E6      {
; 0000 01E7        LED = 1;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01E8        if(BuzzDelay < (400+(CounterValue - MainCounter)*200))
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 01E9        {
; 0000 01EA        BuzzDelay++;
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 01EB        }
; 0000 01EC        else
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01ED        {
; 0000 01EE        if(Buzzer ==1) {Buzzer = 0;}
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 01EF        else           {Buzzer=1;}
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 01F0        BuzzDelay = 0;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 01F1        }
;PCODE: $000003A0 VOL: 0
; 0000 01F2      }
; 0000 01F3   if(read_adc(2) < 400 )
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 01F4   {
; 0000 01F5      CounterINTFlag = 0;
;PCODE: $000003A7 VOL: 0
; 0000 01F6   }
; 0000 01F7   if(read_adc(4) > 400) {delay_ms(100);break;}
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 01F8   if(read_adc(3) > 150)
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 01F9   {
; 0000 01FA   FirstVal = 11 ; SecondVal = 11 ; ThirdVal = 11 ;ForthVal = 11; delay_ms(500);
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01FB   SetValue();
;PCODE: $000003C0 VOL: 0
; 0000 01FC   Display(MainCounter);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 01FD   }
; 0000 01FE    if(AnimationIsOn == 1)
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 01FF   {
; 0000 0200    AnimSegFlag = 1;
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 0201    AnimDelayCounter++;
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0202    if(AnimDelayCounter == 1000)
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0203    {
; 0000 0204     if(CheckCounterValue == 1)
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0205     {
; 0000 0206      AnimSegFrame++;
;PCODE: $000003D3 VOL: 0
; 0000 0207      AnimDelayCounter = 0;
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0208      if(AnimSegFrame == 12)
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0209      {
; 0000 020A       AnimSegFrame = 0;
;PCODE: $000003D9 VOL: 0
; 0000 020B      }
; 0000 020C     }
;PCODE: $000003DA VOL: 0
; 0000 020D     else
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 020E     {
; 0000 020F       AnimDelayCounter = 0;
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0210       if(AnimSegFrame == 11)AnimSegFrame = 12;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0211       else AnimSegFrame = 11;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0212     }
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 0213    }
; 0000 0214   }
;PCODE: $000003EA VOL: 0
; 0000 0215  }
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0216  LED = 0;
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0217 }
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;void main(void)
; 0000 0219 {
;PCODE: $000003F4 VOL: 0
; 0000 021A // Declare your local variables here
; 0000 021B FirstVal = 10 ; SecondVal = 10 ; ThirdVal = 10 ;ForthVal = 10;
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 021C init();
;PCODE: $000003FD VOL: 0
; 0000 021D // DDRC.1 = 0;   Buzzer OFF
; 0000 021E if(CounterValue == -1) CounterValue = 0;
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 021F if(TotalCounter == -1) TotalCounter = 0;
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0220 AnimationIsOn = 0;
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0221 while (1)
;PCODE: $00000411 VOL: 0
; 0000 0222       {
; 0000 0223       DecimalPoint = 0;
;PCODE: $00000412 VOL: 0
; 0000 0224       CheckCounterValue = 0;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 0225       RelayOut = 0;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 0226       Buzzer = 0;
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0227       AnimSegFlag = 0;
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 0228       FirstVal = 10 ; SecondVal = 10 ; ThirdVal = 10 ;ForthVal = 10;
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 0229       Buzzer = 1;
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 022A       delay_ms(200);
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 022B       Buzzer = 0;
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 022C       //999000 Is End OF Counter
; 0000 022D       if(TotalCounter/100 > 9990)
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 022E       {
; 0000 022F        Display(TotalCounter/100);
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0230        Buzzer = 1;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0231        delay_ms(5000);
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 0232        TotalCounter = 0;
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 0233        Buzzer = 0;
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 0234       }
; 0000 0235       Display(TotalCounter/100); delay_ms(500);
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 0236       FirstVal = 11 ; SecondVal = 10 ; ThirdVal = 10 ;ForthVal = 10; delay_ms(500);
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0237       Display(TotalCounter/100); delay_ms(500);
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0238       FirstVal = 11 ; SecondVal = 11 ; ThirdVal = 10 ;ForthVal = 10; delay_ms(500);
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 0239       Display(TotalCounter/100); delay_ms(500);
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 023A       FirstVal = 11 ; SecondVal = 11 ; ThirdVal = 11 ;ForthVal = 10; delay_ms(500);
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 023B       Display(TotalCounter/100); delay_ms(500);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 023C       FirstVal = 11 ; SecondVal = 11 ; ThirdVal = 11 ;ForthVal = 11; delay_ms(500);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 023D       FirstVal = 0 ; SecondVal = 10 ; ThirdVal = 10 ;ForthVal = 10;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 023E       StartCounting();
;PCODE: $00000496 VOL: 0
; 0000 023F       }
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0240 }
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
