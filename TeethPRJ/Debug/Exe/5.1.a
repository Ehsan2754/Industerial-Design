;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : TeethRadiology Project
;Version : 5.1
;Date    : 7/7/2017
;Author  : Ehsan Shaghaei
;Company : EHP
;Comments:
;
;
;Chip type               : ATmega64A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define Buzzer     PORTB.0
;#define Ssr        PORTB.2
;#define Timer_LED  PORTB.1
;#define Expose_LED PORTG.4
;#define A0         PORTB.3
;#define A1         PORTB.4
;#define A2         PORTB.5
;#define A3         PORTB.6
;#define A4         PORTB.7
;#define A5         PORTE.0
;#define A6         PORTB.3
;#define A7         PORTB.3
;
;#define D0         PIND.7
;#define D1         PIND.6
;#define D2         PIND.5
;#define D3         PIND.4
;
;#define RVG_SW       PINE.6
;#define Timer_SW     PINE.7
;#define Expose_SW    PIND.2
;#define Up_SW        PINE.4
;#define Down_SW      PIND.0
;
;#define Set_Segments PORTF
;
;
;// Declare your global variables here
;flash int  time [16] = {790,760,730,600,530,500,450,400,350,420,470,550,650,720,780,800};
;flash char no   [11] = {0b00000011,0b10011111,0b00100101,0b00001101,0b10011001,0b01001001,0b01000001,0b00011111,0b000000 ...
;int digit [4] = {0,1,2,3};

	.DSEG
;int k = 0,z=0;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 003D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003E // Place your code here
; 0000 003F     k++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0040     z = k%4;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0041     switch(z)
;PCODE: $00000016 VOL: 0
; 0000 0042     {
; 0000 0043     case 0:
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0044     PORTG&=~(1<<1);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0045     PORTG&=~(1<<2);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0046     PORTG&=~(1<<3);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0047     PORTG|=(1<<0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0048     Set_Segments = no[digit[0]];
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0049     break;
;PCODE: $00000029 VOL: 0
; 0000 004A     case 1:
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004B     PORTG&=~(1<<0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004C     PORTG&=~(1<<2);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004D     PORTG&=~(1<<3);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004E     PORTG|=(1<<1);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004F     Set_Segments = no[digit[0]];
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0050     break;
;PCODE: $0000003D VOL: 0
; 0000 0051     case 2:
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0052     PORTG&=~(1<<0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0053     PORTG&=~(1<<1);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0054     PORTG&=~(1<<3);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0055     PORTG|=(1<<2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0056     Set_Segments = no[digit[0]];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0057     break;
;PCODE: $00000051 VOL: 0
; 0000 0058     case 3:
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0059     PORTG&=~(1<<0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005A     PORTG&=~(1<<1);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005B     PORTG&=~(1<<2);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005C     PORTG|=(1<<3);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005D     Set_Segments = no[digit[0]];
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005E     break;
;PCODE: $00000065 VOL: 0
; 0000 005F     }
;PCODE: $00000066 VOL: 0
; 0000 0060 
; 0000 0061 
; 0000 0062 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void main(void)
; 0000 0065 {
;PCODE: $0000006A VOL: 0
; 0000 0066 // Declare your local variables here
; 0000 0067 
; 0000 0068 // Input/Output Ports initialization
; 0000 0069 // Port A initialization
; 0000 006A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006B DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 006C // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 006D PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006E 
; 0000 006F // Port B initialization
; 0000 0070 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0071 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0072 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0073 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0074 
; 0000 0075 // Port C initialization
; 0000 0076 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0077 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0078 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0079 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007A 
; 0000 007B // Port D initialization
; 0000 007C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 007E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 007F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0080 
; 0000 0081 // Port E initialization
; 0000 0082 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0083 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (1<<DDE2) | (1<<DDE1) | (1<<DDE0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0084 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0085 PORTE=(1<<PORTE7) | (1<<PORTE6) | (1<<PORTE5) | (1<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0086 
; 0000 0087 // Port F initialization
; 0000 0088 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0089 DDRF=(1<<DDF7) | (1<<DDF6) | (1<<DDF5) | (1<<DDF4) | (1<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 008B PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008C 
; 0000 008D // Port G initialization
; 0000 008E // Function: Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 008F DDRG=(1<<DDG4) | (1<<DDG3) | (1<<DDG2) | (1<<DDG1) | (1<<DDG0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0090 // State: Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0091 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0092 
; 0000 0093 // Timer/Counter 0 initialization
; 0000 0094 // Clock source: System Clock
; 0000 0095 // Clock value: 125.000 kHz
; 0000 0096 // Mode: Normal top=0xFF
; 0000 0097 // OC0 output: Disconnected
; 0000 0098 // Timer Period: 2.048 ms
; 0000 0099 ASSR=0<<AS0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 009B TCNT0=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009C OCR0=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 1 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer1 Stopped
; 0000 00A1 // Mode: Normal top=0xFFFF
; 0000 00A2 // OC1A output: Disconnected
; 0000 00A3 // OC1B output: Disconnected
; 0000 00A4 // OC1C output: Disconnected
; 0000 00A5 // Noise Canceler: Off
; 0000 00A6 // Input Capture on Falling Edge
; 0000 00A7 // Timer1 Overflow Interrupt: Off
; 0000 00A8 // Input Capture Interrupt: Off
; 0000 00A9 // Compare A Match Interrupt: Off
; 0000 00AA // Compare B Match Interrupt: Off
; 0000 00AB // Compare C Match Interrupt: Off
; 0000 00AC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AE TCNT1H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AF TCNT1L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B0 ICR1H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B1 ICR1L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B2 OCR1AH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B3 OCR1AL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B4 OCR1BH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B5 OCR1BL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B6 OCR1CH=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B7 OCR1CL=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B8 
; 0000 00B9 // Timer/Counter 2 initialization
; 0000 00BA // Clock source: System Clock
; 0000 00BB // Clock value: Timer2 Stopped
; 0000 00BC // Mode: Normal top=0xFF
; 0000 00BD // OC2 output: Disconnected
; 0000 00BE TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00BF TCNT2=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C0 OCR2=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer/Counter 3 initialization
; 0000 00C3 // Clock source: System Clock
; 0000 00C4 // Clock value: Timer3 Stopped
; 0000 00C5 // Mode: Normal top=0xFFFF
; 0000 00C6 // OC3A output: Disconnected
; 0000 00C7 // OC3B output: Disconnected
; 0000 00C8 // OC3C output: Disconnected
; 0000 00C9 // Noise Canceler: Off
; 0000 00CA // Input Capture on Falling Edge
; 0000 00CB // Timer3 Overflow Interrupt: Off
; 0000 00CC // Input Capture Interrupt: Off
; 0000 00CD // Compare A Match Interrupt: Off
; 0000 00CE // Compare B Match Interrupt: Off
; 0000 00CF // Compare C Match Interrupt: Off
; 0000 00D0 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D1 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00D2 TCNT3H=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D3 TCNT3L=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D4 ICR3H=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D5 ICR3L=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D6 OCR3AH=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D7 OCR3AL=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D8 OCR3BH=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00D9 OCR3BL=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00DA OCR3CH=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00DB OCR3CL=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00DC 
; 0000 00DD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00DF ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00E0 
; 0000 00E1 // External Interrupt(s) initialization
; 0000 00E2 // INT0: Off
; 0000 00E3 // INT1: Off
; 0000 00E4 // INT2: Off
; 0000 00E5 // INT3: Off
; 0000 00E6 // INT4: Off
; 0000 00E7 // INT5: Off
; 0000 00E8 // INT6: Off
; 0000 00E9 // INT7: Off
; 0000 00EA EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00EB EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00EC EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00ED 
; 0000 00EE // USART0 initialization
; 0000 00EF // USART0 disabled
; 0000 00F0 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F1 
; 0000 00F2 // USART1 initialization
; 0000 00F3 // USART1 disabled
; 0000 00F4 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F5 
; 0000 00F6 // Analog Comparator initialization
; 0000 00F7 // Analog Comparator: Off
; 0000 00F8 // The Analog Comparator's positive input is
; 0000 00F9 // connected to the AIN0 pin
; 0000 00FA // The Analog Comparator's negative input is
; 0000 00FB // connected to the AIN1 pin
; 0000 00FC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FD SFIOR=(0<<ACME);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00FE 
; 0000 00FF // ADC initialization
; 0000 0100 // ADC disabled
; 0000 0101 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0102 
; 0000 0103 // SPI initialization
; 0000 0104 // SPI disabled
; 0000 0105 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0106 
; 0000 0107 // TWI initialization
; 0000 0108 // TWI disabled
; 0000 0109 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 010A 
; 0000 010B // Global enable interrupts
; 0000 010C #asm("sei")
;PCODE: $000000DD VOL: 0
	sei
;PCODE: $000000DE VOL: 0
; 0000 010D 
; 0000 010E while (1)
;PCODE: $000000DF VOL: 0
; 0000 010F       {
; 0000 0110       // Place your code here
; 0000 0111 
; 0000 0112       }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0113 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
