;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2/12/2015
;Author  : Dr.Ehsan.sh
;Company : R2T-COMPANY
;Comments:7-segs are commen catods;;;
;.
;..
;...
;....
;.....
;......
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;//Headers
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <math.h>
;
;//Defines
;#define seg1 PINB.0
;#define seg2 PINB.1
;#define A PIND.0
;#define B PIND.1
;#define C PIND.0
;#define D PIND.0
;#define E PIND.0
;#define F PIND.0
;#define G PIND.0
;#define DOT PIND.0
;#define sensor PORTC.0
;#define ADC_VREF_TYPE 0x00
;char a= 121;
;//char R = 119;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0034 // Delay needed for the stabilization of the ADC input voltage
; 0000 0035 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0036 // Start the AD conversion
; 0000 0037 ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0038 // Wait for the AD conversion to complete
; 0000 0039 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003A ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003B return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003C }
;PCODE: $00000021 VOL: 0
;
;
;void ch_7 ()
; 0000 0040 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0041  if (seg1 == 0 ^ seg2 == 1)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0042 {
; 0000 0043  delay_ms(200);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0044  seg1 = 1 ;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0045  seg2 = 0 ;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0046 }
; 0000 0047 else if (seg2==0 ^ seg1 == 1)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0048 {
; 0000 0049  seg1 = 0 ;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004A  seg2 = 1 ;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004B }
; 0000 004C else {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004D  seg1 = 0 ;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004E  seg2 = 1 ;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004F 
; 0000 0050 }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0051 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;float out_adc ()//temp formula
; 0000 0054 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0055  float temp;
; 0000 0056  float out ;
; 0000 0057  temp = read_adc(0);/*CHECK THE FOORMULA*/
;PCODE: $00000053 VOL: 0
;	temp -> Y+4
;	out -> Y+0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0058  if ((temp <10 ^ temp > -10))
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0059 {
; 0000 005A    return temp;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005B  }
; 0000 005C  else if ((temp>10 ^ temp <100)||(temp<-10 ^ temp >-100))
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005D  {
; 0000 005E   out = floor(temp);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 005F   return out;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0060  }
; 0000 0061  else if (temp >100)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0062  {
; 0000 0063     return E;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0064  }
; 0000 0065 }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;// Declare your global variables here
;void set_chip()
; 0000 0069 {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006A 
; 0000 006B // Declare your local variables here
; 0000 006C 
; 0000 006D // Input/Output Ports initialization
; 0000 006E // Port B initialization
; 0000 006F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0070 // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 0071 PORTB=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0072 DDRB=0x03;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0073 
; 0000 0074 // Port C initialization
; 0000 0075 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0076 // State6=T State5=T State4=T State3=T State2=T State1=T State0=P
; 0000 0077 PORTC=0x01;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0078 DDRC=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0079 
; 0000 007A // Port D initialization
; 0000 007B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 007C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 007D PORTD=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 007E DDRD=0xFF;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 007F 
; 0000 0080 // Timer/Counter 0 initialization
; 0000 0081 // Clock source: System Clock
; 0000 0082 // Clock value: Timer 0 Stopped
; 0000 0083 TCCR0=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0084 TCNT0=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Discon.
; 0000 008B // OC1B output: Discon.
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: Off
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0093 TCCR1B=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0094 TCNT1H=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0095 TCNT1L=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0096 ICR1H=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0097 ICR1L=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0098 OCR1AH=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0099 OCR1AL=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 009A OCR1BH=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 009B OCR1BL=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer2 Stopped
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2 output: Disconnected
; 0000 00A2 ASSR=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A3 TCCR2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A4 TCNT2=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A5 OCR2=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A6 
; 0000 00A7 // External Interrupt(s) initialization
; 0000 00A8 // INT0: Off
; 0000 00A9 // INT1: Off
; 0000 00AA MCUCR=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AB 
; 0000 00AC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AD TIMSK=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AE 
; 0000 00AF // USART initialization
; 0000 00B0 // USART disabled
; 0000 00B1 UCSRB=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00B2 
; 0000 00B3 // Analog Comparator initialization
; 0000 00B4 // Analog Comparator: Off
; 0000 00B5 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B6 ACSR=0x80;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B7 SFIOR=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00B8 
; 0000 00B9 // ADC initialization
; 0000 00BA // ADC Clock frequency: 1000.000 kHz
; 0000 00BB // ADC Voltage Reference: AREF pin
; 0000 00BC ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00BD ADCSRA=0x83;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BE 
; 0000 00BF // SPI initialization
; 0000 00C0 // SPI disabled
; 0000 00C1 SPCR=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C2 
; 0000 00C3 // TWI initialization
; 0000 00C4 // TWI disabled
; 0000 00C5 TWCR=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00C6 
; 0000 00C7 }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;void main(void)
; 0000 00C9 {
;PCODE: $000000D1 VOL: 0
; 0000 00CA while (1)
;PCODE: $000000D2 VOL: 0
; 0000 00CB       {
; 0000 00CC       // Place your code here
; 0000 00CD       set_chip();
;PCODE: $000000D3 VOL: 0
; 0000 00CE 
; 0000 00CF 
; 0000 00D0 
; 0000 00D1       }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D2 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
