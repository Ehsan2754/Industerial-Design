
AVRASM ver. 2.1.30  C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm Thu Jul 14 20:07:51 2016

C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0074 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0093 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x2020060:
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1140): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2020000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Ehsan Shaghaei\Documents\00a\Debug\List\00recive.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0001      	.DW  0x01
00003e 0002      	.DW  0x02
00003f 0066      	.DW  __REG_BIT_VARS*2
                 
000040 0006      	.DW  0x06
000041 0004      	.DW  0x04
000042 0068      	.DW  __REG_VARS*2
                 
000043 0001      	.DW  0x01
000044 0170      	.DW  __seed_G101
000045 006e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bffb      	OUT  GICR,R31
00004c bfeb      	OUT  GICR,R30
00004d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 00d2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ; #include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ; #include <delay.h>
                 ; #include <stdio.h>
                 ; #include <stdlib.h>
                 ; #include <string.h>
                 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;
                 ;bit rx_buffer_overflow;
                 ;char outdate[15];
                 ;// vaghfe rx
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000074 93ea      	ST   -Y,R30
000075 93fa      	ST   -Y,R31
000076 b7ef      	IN   R30,SREG
000077 93ea      	ST   -Y,R30
                 ; 0000 0023 char status,data;
                 ; 0000 0024 status=UCSRA;
000078 931a      	ST   -Y,R17
000079 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00007a b11b      	IN   R17,11
                 ; 0000 0025 data=UDR;
00007b b10c      	IN   R16,12
                 ; 0000 0026 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00007c 2fe1      	MOV  R30,R17
00007d 71ec      	ANDI R30,LOW(0x1C)
00007e f489      	BRNE _0x3
                 ; 0000 0027    {
                 ; 0000 0028    rx_buffer[rx_wr_index++]=data;
00007f 2de5      	MOV  R30,R5
000080 9453      	INC  R5
000081 e0f0      	LDI  R31,0
000082 5ae0      	SUBI R30,LOW(-_rx_buffer)
000083 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000084 8300      	ST   Z,R16
                 ; 0000 0029 #if RX_BUFFER_SIZE == 256
                 ; 0000 002A    // special case for receiver buffer size=256
                 ; 0000 002B    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 002C #else
                 ; 0000 002D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000085 e0e8      	LDI  R30,LOW(8)
000086 15e5      	CP   R30,R5
000087 f409      	BRNE _0x4
000088 2455      	CLR  R5
                 ; 0000 002E    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000089 9473      	INC  R7
00008a e0e8      	LDI  R30,LOW(8)
00008b 15e7      	CP   R30,R7
00008c f419      	BRNE _0x5
                 ; 0000 002F       {
                 ; 0000 0030       rx_counter=0;
00008d 2477      	CLR  R7
                 ; 0000 0031       rx_buffer_overflow=1;
00008e 9468      	SET
00008f f820      	BLD  R2,0
                 ; 0000 0032       }
                 ; 0000 0033 #endif
                 ; 0000 0034    }
                 _0x5:
                 ; 0000 0035 }
                 _0x3:
000090 9109      	LD   R16,Y+
000091 9119      	LD   R17,Y+
000092 c012      	RJMP _0x21
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 003C {
                 ; 0000 003D char data;
                 ; 0000 003E while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 003F data=rx_buffer[rx_rd_index++];
                 ; 0000 0040 #if RX_BUFFER_SIZE != 256
                 ; 0000 0041 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0042 #endif
                 ; 0000 0043 #asm("cli")
                 ; 0000 0044 --rx_counter;
                 ; 0000 0045 #asm("sei")
                 ; 0000 0046 return data;
                 ; 0000 0047 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;//vaghfe Tx
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 005D {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000093 93ea      	ST   -Y,R30
000094 93fa      	ST   -Y,R31
000095 b7ef      	IN   R30,SREG
000096 93ea      	ST   -Y,R30
                 ; 0000 005E if (tx_counter)
000097 2088      	TST  R8
000098 f061      	BREQ _0xA
                 ; 0000 005F    {
                 ; 0000 0060    --tx_counter;
000099 948a      	DEC  R8
                 ; 0000 0061    UDR=tx_buffer[tx_rd_index++];
00009a 2de9      	MOV  R30,R9
00009b 9493      	INC  R9
00009c e0f0      	LDI  R31,0
00009d 59e8      	SUBI R30,LOW(-_tx_buffer)
00009e 4ffe      	SBCI R31,HIGH(-_tx_buffer)
00009f 81e0      	LD   R30,Z
0000a0 b9ec      	OUT  0xC,R30
                 ; 0000 0062 #if TX_BUFFER_SIZE != 256
                 ; 0000 0063    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000a1 e0e8      	LDI  R30,LOW(8)
0000a2 15e9      	CP   R30,R9
0000a3 f409      	BRNE _0xB
0000a4 2499      	CLR  R9
                 ; 0000 0064 #endif
                 ; 0000 0065    }
                 _0xB:
                 ; 0000 0066 }
                 _0xA:
                 _0x21:
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91f9      	LD   R31,Y+
0000a8 91e9      	LD   R30,Y+
0000a9 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 006D {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 006E while (tx_counter == TX_BUFFER_SIZE);
0000aa 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
0000ab e0e8      	LDI  R30,LOW(8)
0000ac 15e8      	CP   R30,R8
0000ad f3e9      	BREQ _0xC
                 ; 0000 006F #asm("cli")
0000ae 94f8      	cli
                 ; 0000 0070 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000af 2088      	TST  R8
0000b0 f411      	BRNE _0x10
0000b1 995d      	SBIC 0xB,5
0000b2 c00d      	RJMP _0xF
                 _0x10:
                 ; 0000 0071    {
                 ; 0000 0072    tx_buffer[tx_wr_index++]=c;
0000b3 2de6      	MOV  R30,R6
0000b4 9463      	INC  R6
0000b5 e0f0      	LDI  R31,0
0000b6 59e8      	SUBI R30,LOW(-_tx_buffer)
0000b7 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000b8 81a8      	LD   R26,Y
0000b9 83a0      	STD  Z+0,R26
                 ; 0000 0073 #if TX_BUFFER_SIZE != 256
                 ; 0000 0074    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0000ba e0e8      	LDI  R30,LOW(8)
0000bb 15e6      	CP   R30,R6
0000bc f409      	BRNE _0x12
0000bd 2466      	CLR  R6
                 ; 0000 0075 #endif
                 ; 0000 0076    ++tx_counter;
                 _0x12:
0000be 9483      	INC  R8
                 ; 0000 0077    }
                 ; 0000 0078 else
0000bf c002      	RJMP _0x13
                 _0xF:
                 ; 0000 0079    UDR=c;
0000c0 81e8      	LD   R30,Y
0000c1 b9ec      	OUT  0xC,R30
                 ; 0000 007A #asm("sei")
                 _0x13:
0000c2 9478      	sei
                 ; 0000 007B }
0000c3 c00c      	RJMP _0x20A0001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;#include <stdio.h>
                 ;
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0087 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0088 ADMUX=adc_input | ADC_VREF_TYPE;
0000c4 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000c5 81e8      	LD   R30,Y
0000c6 b9e7      	OUT  0x7,R30
                 ; 0000 0089 
                 ; 0000 008A delay_us(10);
                +
0000c7 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000c8 958a     +DEC R24
0000c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 008B 
                 ; 0000 008C ADCSRA|=(1<<ADSC);
0000ca 9a36      	SBI  0x6,6
                 ; 0000 008D 
                 ; 0000 008E while ((ADCSRA & (1<<ADIF))==0);
                 _0x14:
0000cb 9b34      	SBIS 0x6,4
0000cc cffe      	RJMP _0x14
                 ; 0000 008F ADCSRA|=(1<<ADIF);
0000cd 9a34      	SBI  0x6,4
                 ; 0000 0090 return ADCW;
0000ce b1e4      	IN   R30,0x4
0000cf b1f5      	IN   R31,0x4+1
                 _0x20A0001:
0000d0 9621      	ADIW R28,1
0000d1 9508      	RET
                 ; 0000 0091 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0094 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0095 
                 ; 0000 0096 //tanzimat port A
                 ; 0000 0097 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 bbea      	OUT  0x1A,R30
                 ; 0000 0098 
                 ; 0000 0099 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d4 bbeb      	OUT  0x1B,R30
                 ; 0000 009A 
                 ; 0000 009B //tanzimat port B
                 ; 0000 009C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d5 bbe7      	OUT  0x17,R30
                 ; 0000 009D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000d6 bbe8      	OUT  0x18,R30
                 ; 0000 009E 
                 ; 0000 009F // tanzimat port C
                 ; 0000 00A0 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000d7 bbe4      	OUT  0x14,R30
                 ; 0000 00A1 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000d8 bbe5      	OUT  0x15,R30
                 ; 0000 00A2 // tanzimat port D
                 ; 0000 00A3 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000d9 bbe1      	OUT  0x11,R30
                 ; 0000 00A4 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000da bbe2      	OUT  0x12,R30
                 ; 0000 00A5 // faal sazi uart ba BAUD9600
                 ; 0000 00A6 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000db b9eb      	OUT  0xB,R30
                 ; 0000 00A7 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000dc ede8      	LDI  R30,LOW(216)
0000dd b9ea      	OUT  0xA,R30
                 ; 0000 00A8 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000de e8e6      	LDI  R30,LOW(134)
0000df bde0      	OUT  0x20,R30
                 ; 0000 00A9 UBRRH=0x00;
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 bde0      	OUT  0x20,R30
                 ; 0000 00AA UBRRL=0x33;
0000e2 e3e3      	LDI  R30,LOW(51)
0000e3 b9e9      	OUT  0x9,R30
                 ; 0000 00AB // faal sazi ADC  , clock = 1Mhz , refrence = AREF , mode : free run
                 ; 0000 00AC ADMUX=ADC_VREF_TYPE;
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 b9e7      	OUT  0x7,R30
                 ; 0000 00AD ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000e6 eae3      	LDI  R30,LOW(163)
0000e7 b9e6      	OUT  0x6,R30
                 ; 0000 00AE SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bfe0      	OUT  0x30,R30
                 ; 0000 00AF #asm("sei") //faal sazi vaghfe ha
0000ea 9478      	sei
                 ; 0000 00B0 
                 ; 0000 00B1 while (1)
                 _0x17:
                 ; 0000 00B2       {
                 ; 0000 00B3          int j =0;
                 ; 0000 00B4          int i = read_adc(0);
                 ; 0000 00B5          int out = i/3; //tabdil meghdar sensor be dama
                 ; 0000 00B6          char temp_out [4];
                 ; 0000 00B7           for(j = 0; j<4 ; j++)
0000eb 972a      	SBIW R28,10
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 87e8      	STD  Y+8,R30
0000ee 87e9      	STD  Y+9,R30
                 ;	j -> Y+8
                 ;	i -> Y+6
                 ;	out -> Y+4
                 ;	temp_out -> Y+0
0000ef e0a0      	LDI  R26,LOW(0)
0000f0 dfd3      	RCALL _read_adc
0000f1 83ee      	STD  Y+6,R30
0000f2 83ff      	STD  Y+6+1,R31
0000f3 81ae      	LDD  R26,Y+6
0000f4 81bf      	LDD  R27,Y+6+1
0000f5 e0e3      	LDI  R30,LOW(3)
0000f6 e0f0      	LDI  R31,HIGH(3)
0000f7 940e 0188 	CALL __DIVW21
0000f9 83ec      	STD  Y+4,R30
0000fa 83fd      	STD  Y+4+1,R31
0000fb e0e0      	LDI  R30,LOW(0)
0000fc 87e8      	STD  Y+8,R30
0000fd 87e9      	STD  Y+8+1,R30
                 _0x1B:
0000fe 85a8      	LDD  R26,Y+8
0000ff 85b9      	LDD  R27,Y+8+1
000100 9714      	SBIW R26,4
000101 f454      	BRGE _0x1C
                 ; 0000 00B8          {
                 ; 0000 00B9           temp_out[j]= '\0';
000102 940e 0161 	CALL SUBOPT_0x0
000104 e0e0      	LDI  R30,LOW(0)
000105 93ec      	ST   X,R30
                 ; 0000 00BA          }
000106 85e8      	LDD  R30,Y+8
000107 85f9      	LDD  R31,Y+8+1
000108 9631      	ADIW R30,1
000109 87e8      	STD  Y+8,R30
00010a 87f9      	STD  Y+8+1,R31
00010b cff2      	RJMP _0x1B
                 _0x1C:
                 ; 0000 00BB          delay_ms(500);
00010c efa4      	LDI  R26,LOW(500)
00010d e0b1      	LDI  R27,HIGH(500)
00010e 940e 0167 	CALL _delay_ms
                 ; 0000 00BC          itoa(out,temp_out);  //tabdil meghdar sahih be reshte
000110 81ec      	LDD  R30,Y+4
000111 81fd      	LDD  R31,Y+4+1
000112 93fa      	ST   -Y,R31
000113 93ea      	ST   -Y,R30
000114 01de      	MOVW R26,R28
000115 9612      	ADIW R26,2
000116 940e 0133 	CALL _itoa
                 ; 0000 00BD          temp_out[2] = 'C';
000118 e4e3      	LDI  R30,LOW(67)
000119 83ea      	STD  Y+2,R30
                 ; 0000 00BE          temp_out[3] = '\0'; //tabdil be sakhtar reshtei
00011a e0e0      	LDI  R30,LOW(0)
00011b 83eb      	STD  Y+3,R30
                 ; 0000 00BF          delay_us(200);
                +
00011c e980     +LDI R24 , LOW ( 400 )
00011d e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00011e 9701     +SBIW R24 , 1
00011f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ; 0000 00C0          for(j = 0; j<4 ; j++)
000120 87e8      	STD  Y+8,R30
000121 87e9      	STD  Y+8+1,R30
                 _0x1E:
000122 85a8      	LDD  R26,Y+8
000123 85b9      	LDD  R27,Y+8+1
000124 9714      	SBIW R26,4
000125 f454      	BRGE _0x1F
                 ; 0000 00C1          {
                 ; 0000 00C2          putchar(temp_out[j]);
000126 940e 0161 	CALL SUBOPT_0x0
000128 91ac      	LD   R26,X
000129 df80      	RCALL _putchar
                 ; 0000 00C3          }
00012a 85e8      	LDD  R30,Y+8
00012b 85f9      	LDD  R31,Y+8+1
00012c 9631      	ADIW R30,1
00012d 87e8      	STD  Y+8,R30
00012e 87f9      	STD  Y+8+1,R31
00012f cff2      	RJMP _0x1E
                 _0x1F:
                 ; 0000 00C4       }
000130 962a      	ADIW R28,10
000131 cfb9      	RJMP _0x17
                 ; 0000 00C5 }
                 _0x20:
000132 cfff      	RJMP _0x20
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000133 93ba      	ST   -Y,R27
000134 93aa      	ST   -Y,R26
000135 91a9          ld   r26,y+
000136 91b9          ld   r27,y+
000137 91e9          ld   r30,y+
000138 91f9          ld   r31,y+
000139 9630          adiw r30,0
00013a f42a          brpl __itoa0
00013b 95e0          com  r30
00013c 95f0          com  r31
00013d 9631          adiw r30,1
00013e e26d          ldi  r22,'-'
00013f 936d          st   x+,r22
                 __itoa0:
000140 94e8          clt
000141 e180          ldi  r24,low(10000)
000142 e297          ldi  r25,high(10000)
000143 d00d          rcall __itoa1
000144 ee88          ldi  r24,low(1000)
000145 e093          ldi  r25,high(1000)
000146 d00a          rcall __itoa1
000147 e684          ldi  r24,100
000148 2799          clr  r25
000149 d007          rcall __itoa1
00014a e08a          ldi  r24,10
00014b d005          rcall __itoa1
00014c 2f6e          mov  r22,r30
00014d d010          rcall __itoa5
00014e 2766          clr  r22
00014f 936c          st   x,r22
000150 9508          ret
                 
                 __itoa1:
000151 2766          clr	 r22
                 __itoa2:
000152 17e8          cp   r30,r24
000153 07f9          cpc  r31,r25
000154 f020          brlo __itoa3
000155 9563          inc  r22
000156 1be8          sub  r30,r24
000157 0bf9          sbc  r31,r25
000158 f7c9          brne __itoa2
                 __itoa3:
000159 2366          tst  r22
00015a f411          brne __itoa4
00015b f016          brts __itoa5
00015c 9508          ret
                 __itoa4:
00015d 9468          set
                 __itoa5:
00015e 5d60          subi r22,-0x30
00015f 936d          st   x+,r22
000160 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _tx_buffer:
000168           	.BYTE 0x8
                 __seed_G101:
000170           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000161 85e8      	LDD  R30,Y+8
000162 85f9      	LDD  R31,Y+8+1
000163 01de      	MOVW R26,R28
000164 0fae      	ADD  R26,R30
000165 1fbf      	ADC  R27,R31
000166 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000167 9610      	adiw r26,0
000168 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000169 ed80     +LDI R24 , LOW ( 0x7D0 )
00016a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016b 9701     +SBIW R24 , 1
00016c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00016d 95a8      	wdr
00016e 9711      	sbiw r26,1
00016f f7c9      	brne __delay_ms0
                 __delay_ms1:
000170 9508      	ret
                 
                 __ANEGW1:
000171 95f1      	NEG  R31
000172 95e1      	NEG  R30
000173 40f0      	SBCI R31,0
000174 9508      	RET
                 
                 __DIVW21U:
000175 2400      	CLR  R0
000176 2411      	CLR  R1
000177 e190      	LDI  R25,16
                 __DIVW21U1:
000178 0faa      	LSL  R26
000179 1fbb      	ROL  R27
00017a 1c00      	ROL  R0
00017b 1c11      	ROL  R1
00017c 1a0e      	SUB  R0,R30
00017d 0a1f      	SBC  R1,R31
00017e f418      	BRCC __DIVW21U2
00017f 0e0e      	ADD  R0,R30
000180 1e1f      	ADC  R1,R31
000181 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000182 60a1      	SBR  R26,1
                 __DIVW21U3:
000183 959a      	DEC  R25
000184 f799      	BRNE __DIVW21U1
000185 01fd      	MOVW R30,R26
000186 01d0      	MOVW R26,R0
000187 9508      	RET
                 
                 __DIVW21:
000188 d004      	RCALL __CHKSIGNW
000189 dfeb      	RCALL __DIVW21U
00018a f40e      	BRTC __DIVW211
00018b dfe5      	RCALL __ANEGW1
                 __DIVW211:
00018c 9508      	RET
                 
                 __CHKSIGNW:
00018d 94e8      	CLT
00018e fff7      	SBRS R31,7
00018f c002      	RJMP __CHKSW1
000190 dfe0      	RCALL __ANEGW1
000191 9468      	SET
                 __CHKSW1:
000192 ffb7      	SBRS R27,7
000193 c006      	RJMP __CHKSW2
000194 95a0      	COM  R26
000195 95b0      	COM  R27
000196 9611      	ADIW R26,1
000197 f800      	BLD  R0,0
000198 9403      	INC  R0
000199 fa00      	BST  R0,0
                 __CHKSW2:
00019a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  12 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   4 r7 :   3 
r8 :   5 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  19 r25:  11 r26:  29 r27:  12 r28:   6 r29:   1 r30: 110 r31:  33 
x  :   8 y  :  56 z  :  10 
Registers used: 22 out of 35 (62.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   9 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   1 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  22 ld    :  14 ldd   :  14 ldi   :  51 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   5 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  26 pop   :   0 push  :   0 rcall :  11 ret   :  10 
reti  :   1 rjmp  :  13 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   2 sbic  :   1 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  22 std   :  17 sts   :   0 sub   :   2 subi  :   4 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000336    764     58    822   16384   5.0%
[.dseg] 0x000060 0x000174      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
